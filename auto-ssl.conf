# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 1MB of storage holds certificates for
# approximately 100 separate domains.
lua_shared_dict auto_ssl 1m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# A DNS resolver must be defined for OSCP stapling to function.
resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4;

# Initial setup tasks.
init_by_lua_block {
  auto_ssl = (require "resty.auto-ssl").new()

  -- Define a function to determine which SNI domains to automatically handle
  -- and register new certificates for. Defaults to not allowing any domains,
  -- so this must be configured.
  auto_ssl:set("allow_domain", function(domain)
    return true
  end)
  auto_ssl:set("dir", "/certificates")

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}

# HTTP server
server {
  listen 80;

  # Endpoint used for performing domain verification with Let's Encrypt.
  location /.well-known/acme-challenge/ {
    content_by_lua_block {
      auto_ssl:challenge_server()
    }
  }
}

# Internal server running on port 8999 for handling certificate tasks.
server {
  listen 127.0.0.1:8999;
  
  # Increase the body buffer size, to ensure the internal POSTs can always
  # parse the full POST contents into memory.
  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}
